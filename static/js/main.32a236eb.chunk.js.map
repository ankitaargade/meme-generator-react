{"version":3,"sources":["logo.svg","components/MemeGenerator.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MemeGenerator","props","state","topText","bottomText","randomImage","allMemeImgs","onChange","bind","onMemeGen","fetch","then","res","json","data","setState","memes","console","log","catch","err","evt","preventDefault","Math","floor","random","this","length","url","prevState","event","target","name","value","className","onSubmit","type","placeholder","src","Component","Header","App","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,iLCEtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,YAAa,IAEf,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAVA,E,gEAaE,IAAD,OAElBE,MADU,qCAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZT,YAAaQ,EAAKA,KAAKE,QAEzBC,QAAQC,IAAIJ,EAAKA,KAAKE,UAEvBG,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,Q,gCAEtBC,GAAM,IAAD,OACbA,EAAIC,iBACJL,QAAQC,IACN,YACAK,KAAKC,MACHD,KAAKE,UAAYC,KAAKxB,MAAMI,YAAYqB,OAAS,EAAI,EAAI,GAAK,IAGlEV,QAAQC,IACNQ,KAAKxB,MAAMI,YACTiB,KAAKC,MACHD,KAAKE,UAAYC,KAAKxB,MAAMI,YAAYqB,OAAS,EAAI,EAAI,GAAK,IAEhEC,KAEJF,KAAKX,UAAS,SAACc,GACb,OAAO,2BACFA,GADL,IAEExB,YACEwB,EAAUvB,YACRiB,KAAKC,MACHD,KAAKE,UAAY,EAAKvB,MAAMI,YAAYqB,OAAS,EAAI,EAAI,GAAK,IAEhEC,W,+BAIDE,GAAQ,IAAD,EACUA,EAAMC,OAAtBC,EADM,EACNA,KAAMC,EADA,EACAA,MACdP,KAAKX,SAAL,eACGiB,EAAOC,IAEVhB,QAAQC,IAAI,a,+BAGZ,OACE,yBAAKgB,UAAU,QACb,0BAAMA,UAAU,OAAOC,SAAUT,KAAKjB,WACpC,2BACE2B,KAAK,OACLC,YAAY,aACZJ,MAAOP,KAAKxB,MAAMC,QAClB6B,KAAK,UACLzB,SAAUmB,KAAKnB,WAGjB,2BACE6B,KAAK,OACLC,YAAY,cACZJ,MAAOP,KAAKxB,MAAME,WAClB4B,KAAK,aACLzB,SAAUmB,KAAKnB,WAEjB,6CAIF,yBAAK2B,UAAU,QACb,yBAAKI,IAAKZ,KAAKxB,MAAMG,YAAa2B,KAAK,gBAEvC,wBAAIE,UAAU,YAAYR,KAAKxB,MAAMC,SACrC,wBAAI+B,UAAU,eAAeR,KAAKxB,MAAME,kB,GAvFPmC,aCAtBC,G,6KAEjB,OACE,yBAAKN,UAAU,UACb,yBACEA,UAAU,IACVI,IAAI,mEAEN,yBAAKJ,UAAU,gBACb,oD,GAT0BK,cCgBrBE,MAbf,WACE,OACE,yBAAKP,UAAU,WAAWQ,MAAO,CAAEC,UAAW,WAC5C,4BAAQT,UAAU,cAChB,kBAAC,EAAD,OAEF,0BAAMA,UAAU,YACd,kBAAC,EAAD,SCAYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.32a236eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nexport default class MemeGenerator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: [],\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onMemeGen = this.onMemeGen.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let api = \"https://api.imgflip.com/get_memes\";\r\n    fetch(api)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          allMemeImgs: data.data.memes,\r\n        });\r\n        console.log(data.data.memes);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  onMemeGen(evt) {\r\n    evt.preventDefault();\r\n    console.log(\r\n      \"random no\",\r\n      Math.floor(\r\n        Math.random() * (this.state.allMemeImgs.length - 1 - 1 + 1) + 1\r\n      )\r\n    );\r\n    console.log(\r\n      this.state.allMemeImgs[\r\n        Math.floor(\r\n          Math.random() * (this.state.allMemeImgs.length - 1 - 1 + 1) + 1\r\n        )\r\n      ].url\r\n    );\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        randomImage:\r\n          prevState.allMemeImgs[\r\n            Math.floor(\r\n              Math.random() * (this.state.allMemeImgs.length - 1 - 1 + 1) + 1\r\n            )\r\n          ].url,\r\n      };\r\n    });\r\n  }\r\n  onChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n    console.log(\"changed\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <form className=\"form\" onSubmit={this.onMemeGen}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Upper Text\"\r\n            value={this.state.topText}\r\n            name=\"topText\"\r\n            onChange={this.onChange}\r\n          ></input>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Bottom Text\"\r\n            value={this.state.bottomText}\r\n            name=\"bottomText\"\r\n            onChange={this.onChange}\r\n          ></input>\r\n          <button>Generate</button>\r\n          {/* <h2>{JSON.stringify(this.state.allMemeImgs)}</h2> */}\r\n        </form>\r\n\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImage} name=\"randomImage\" />\r\n\r\n          <h2 className=\"top-text\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom-text\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Styles.css\";\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <img\r\n          className=\" \"\r\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n        ></img>\r\n        <div className=\" header-text\">\r\n          <h1>Meme Generator</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MemeGenerator from \"./components/MemeGenerator\";\nimport Header from \"./components/Header\";\nfunction App() {\n  return (\n    <div className=\"app-body\" style={{ textAlign: \"center\" }}>\n      <header className=\"app-header\">\n        <Header></Header>\n      </header>\n      <main className=\"app-main\">\n        <MemeGenerator></MemeGenerator>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}